package com.reportportal.api;

import com.reportportal.utils.ConfigLoader;
import io.qameta.allure.Epic;
import io.qameta.allure.Feature;
import io.qameta.allure.Story;
import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

/**
 * –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π API —Ç–µ—Å—Ç, –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π, —á—Ç–æ –¥–∞—à–±–æ—Ä–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω –±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è "name".
 *
 * –¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç:
 * - POST –∑–∞–ø—Ä–æ—Å —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ç–µ–ª–æ–º (–±–µ–∑ "name");
 * - –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å 400 –∏ –æ–∂–∏–¥–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ;
 * - GET-–∑–∞–ø—Ä–æ—Å, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π, —á—Ç–æ –¥–∞—à–±–æ—Ä–¥ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω.
 *
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è:
 * - RestAssured –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤;
 * - Allure –¥–ª—è –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç–∏;
 * - JUnit 5 –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–µ—Å—Ç–æ–≤.
 */
@Epic("Report Portal API Tests")
@Feature("Dashboard Management")
public class NegativeDashboardAPITest {

    // –ë–∞–∑–æ–≤—ã–π URL API
    private static final String BASE_URL = ConfigLoader.getProperty("api.base.url");

    // üîë API —Ç–æ–∫–µ–Ω, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–æ–µ–∫—Ç–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º!)
    private static final String API_TOKEN = ConfigLoader.getProperty("api.token");

    private static final String PROJECT_NAME = ConfigLoader.getProperty("project.name");

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ URL –¥–æ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤.
     */
    @BeforeAll
    public static void setup() {
        RestAssured.baseURI = BASE_URL;
    }

    /**
     * –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç: –ø–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –¥–∞—à–±–æ—Ä–¥ –±–µ–∑ –ø–æ–ª—è "name".
     * –û–∂–∏–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å 400 –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
     */
    @Test
    @Story("Create Dashboard with Invalid Data")
    @DisplayName("Create dashboard without required 'name' parameter")
    void testCreateDashboardWithoutName() {
        // JSON —Ç–µ–ª–æ –±–µ–∑ –ø–æ–ª—è "name"
        String invalidRequestBody = """
        {
            "description": "Negative Test Dashboard"
        }
        """;

        // === –®–∞–≥ 1: –û—Ç–ø—Ä–∞–≤–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞ ===
        given()
                .auth().oauth2(API_TOKEN)
                .contentType(ContentType.JSON)
                .accept(ContentType.JSON)
                .pathParam("projectName", PROJECT_NAME)
                .body(invalidRequestBody)
                .when()
                .post("/{projectName}/dashboard")
                .then()
                .log().status()  // –ª–æ–≥ —Å—Ç–∞—Ç—É—Å–∞
                .log().body()    // –ª–æ–≥ —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–∞
                .statusCode(400) // –æ–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É 400 Bad Request
                .body("message", containsString("Field 'name' should not be null")); // –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è

        // === –®–∞–≥ 2: –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∞—à–±–æ—Ä–¥ –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è ===
        given()
                .auth().oauth2(API_TOKEN)
                .pathParam("projectName", PROJECT_NAME)
                .when()
                .get("/{projectName}/dashboard")
                .then()
                .log().status()
                .statusCode(200)
                .body("content.description", not(hasItem("Negative Test Dashboard"))); // —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
    }
}
